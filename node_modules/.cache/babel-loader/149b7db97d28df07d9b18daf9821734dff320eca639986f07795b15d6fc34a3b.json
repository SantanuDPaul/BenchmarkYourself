{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\santa\\\\Desktop\\\\Major\\\\BenchmarkYou\\\\benchmark-you\\\\src\\\\Pages\\\\Games\\\\ReactionTime\\\\ReactionTime.jsx\",\n  _s = $RefreshSig$();\n// App.jsx\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [greenDisplayed, setGreenDisplayed] = useState(false);\n  const [waitingForStart, setWaitingForStart] = useState(false);\n  const [waitingForGreen, setWaitingForGreen] = useState(false);\n  const [scores, setScores] = useState([]);\n  const [reactionTime, setReactionTime] = useState(0);\n  const setGreenColor = () => {\n    // Update state to show green color\n    setGreenDisplayed(true);\n    const timeNow = Date.now();\n    setTimeout(() => {\n      setReactionTime(timeNow);\n    }, Math.floor(Math.random() * 4000 + 3000));\n  };\n  const startGame = () => {\n    // Update state to start game\n    setWaitingForGreen(true);\n    setWaitingForStart(false);\n    setGreenDisplayed(false);\n  };\n  const displayReactionTime = () => {\n    const clickTime = Date.now();\n    const rt = clickTime - reactionTime;\n    setScores([...scores, rt]);\n    if (scores.length >= 2) {\n      endGame();\n    } else {\n      startGame();\n    }\n  };\n  const endGame = () => {\n    // Display end screen\n    // Calculate average score\n    let total = 0;\n    scores.forEach(s => {\n      total += s;\n    });\n    const averageScore = Math.round(total / scores.length);\n    alert(`Your average reaction time: ${averageScore} ms`);\n    // Reset game\n    setScores([]);\n    startGame();\n  };\n  const displayTooSoon = () => {\n    // Display message for clicking too soon\n    alert('Too Soon');\n    // Restart game\n    startGame();\n  };\n  const handleClick = () => {\n    if (greenDisplayed) {\n      displayReactionTime();\n    } else if (waitingForStart) {\n      startGame();\n    } else if (waitingForGreen) {\n      displayTooSoon();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `main-menu ${waitingForStart ? 'active' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Reaction Time Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click as soon as you see the green color on the screen.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click anywhere to start.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `clickable-area ${greenDisplayed ? 'green' : ''}`,\n      onClick: handleClick,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: greenDisplayed ? 'Click Now!' : 'Wait for the Green Color.'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"KAZPSBdtNsXEGMmfx3p8bYCAV6s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","greenDisplayed","setGreenDisplayed","waitingForStart","setWaitingForStart","waitingForGreen","setWaitingForGreen","scores","setScores","reactionTime","setReactionTime","setGreenColor","timeNow","Date","now","setTimeout","Math","floor","random","startGame","displayReactionTime","clickTime","rt","length","endGame","total","forEach","s","averageScore","round","alert","displayTooSoon","handleClick","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/santa/Desktop/Major/BenchmarkYou/benchmark-you/src/Pages/Games/ReactionTime/ReactionTime.jsx"],"sourcesContent":["// App.jsx\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const [greenDisplayed, setGreenDisplayed] = useState(false);\r\n  const [waitingForStart, setWaitingForStart] = useState(false);\r\n  const [waitingForGreen, setWaitingForGreen] = useState(false);\r\n  const [scores, setScores] = useState([]);\r\n  const [reactionTime, setReactionTime] = useState(0);\r\n\r\n  const setGreenColor = () => {\r\n    // Update state to show green color\r\n    setGreenDisplayed(true);\r\n    const timeNow = Date.now();\r\n    setTimeout(() => {\r\n      setReactionTime(timeNow);\r\n    }, Math.floor(Math.random() * 4000 + 3000));\r\n  };\r\n\r\n  const startGame = () => {\r\n    // Update state to start game\r\n    setWaitingForGreen(true);\r\n    setWaitingForStart(false);\r\n    setGreenDisplayed(false);\r\n  };\r\n\r\n  const displayReactionTime = () => {\r\n    const clickTime = Date.now();\r\n    const rt = clickTime - reactionTime;\r\n    setScores([...scores, rt]);\r\n    if (scores.length >= 2) {\r\n      endGame();\r\n    } else {\r\n      startGame();\r\n    }\r\n  };\r\n\r\n  const endGame = () => {\r\n    // Display end screen\r\n    // Calculate average score\r\n    let total = 0;\r\n    scores.forEach((s) => {\r\n      total += s;\r\n    });\r\n    const averageScore = Math.round(total / scores.length);\r\n    alert(`Your average reaction time: ${averageScore} ms`);\r\n    // Reset game\r\n    setScores([]);\r\n    startGame();\r\n  };\r\n\r\n  const displayTooSoon = () => {\r\n    // Display message for clicking too soon\r\n    alert('Too Soon');\r\n    // Restart game\r\n    startGame();\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (greenDisplayed) {\r\n      displayReactionTime();\r\n    } else if (waitingForStart) {\r\n      startGame();\r\n    } else if (waitingForGreen) {\r\n      displayTooSoon();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={`main-menu ${waitingForStart ? 'active' : ''}`}>\r\n        <h1>Reaction Time Test</h1>\r\n        <p>Click as soon as you see the green color on the screen.</p>\r\n        <p>Click anywhere to start.</p>\r\n      </div>\r\n\r\n      <div\r\n        className={`clickable-area ${greenDisplayed ? 'green' : ''}`}\r\n        onClick={handleClick}\r\n      >\r\n        <div className=\"message\">\r\n          {greenDisplayed ? 'Click Now!' : 'Wait for the Green Color.'}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}