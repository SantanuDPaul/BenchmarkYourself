{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\santa\\\\Desktop\\\\Major\\\\BenchmarkYou\\\\benchmark-you\\\\src\\\\Pages\\\\Games\\\\MemoryGame\\\\MemoryGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './MemoryGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MemoryGame = () => {\n  _s();\n  const [gameStarted, setGameStarted] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [flippedCardIndexes, setFlippedCardIndexes] = useState([]);\n  const [totalFlips, setTotalFlips] = useState(0);\n  const [totalTime, setTotalTime] = useState(0);\n  const [loop, setLoop] = useState(null);\n  useEffect(() => {\n    const dimensions = 4; // Adjust as needed\n\n    if (dimensions % 2 !== 0) {\n      throw new Error(\"The dimension of the board must be an even number.\");\n    }\n    const emojis = ['🍐', '🍊', '🍋', '🍉', '🍇', '🍓', '🥑', '🥕', '🌽', '🥬'];\n    const picks = pickRandom(emojis, dimensions * dimensions / 2);\n    const items = shuffle([...picks, ...picks]);\n    const initialCards = items.map((item, index) => ({\n      id: index,\n      emoji: item,\n      flipped: false,\n      matched: false\n    }));\n    setCards(initialCards);\n  }, []);\n  useEffect(() => {\n    if (gameStarted) {\n      const interval = setInterval(() => {\n        setTotalTime(prevTime => prevTime + 1);\n      }, 1000);\n      setLoop(interval);\n    } else {\n      clearInterval(loop);\n    }\n    return () => clearInterval(loop);\n  }, [gameStarted]);\n  useEffect(() => {\n    if (flippedCardIndexes.length === 2) {\n      const [firstIndex, secondIndex] = flippedCardIndexes;\n      const newCards = [...cards];\n      if (cards[firstIndex].emoji === cards[secondIndex].emoji) {\n        newCards[firstIndex] = {\n          ...cards[firstIndex],\n          matched: true\n        };\n        newCards[secondIndex] = {\n          ...cards[secondIndex],\n          matched: true\n        };\n      } else {\n        // If the emojis don't match, flip back the cards after a delay\n        setTimeout(() => {\n          newCards[firstIndex] = {\n            ...cards[firstIndex],\n            flipped: false\n          };\n          newCards[secondIndex] = {\n            ...cards[secondIndex],\n            flipped: false\n          };\n          setCards(newCards);\n        }, 1000);\n      }\n      setCards(newCards);\n      setFlippedCardIndexes([]);\n      setTotalFlips(prevFlips => prevFlips + 1);\n    }\n  }, [flippedCardIndexes]);\n  const flipCard = index => {\n    if (!gameStarted) {\n      setGameStarted(true);\n    }\n    if (flippedCardIndexes.length < 2 && !cards[index].flipped && !cards[index].matched) {\n      const newCards = [...cards];\n      newCards[index] = {\n        ...newCards[index],\n        flipped: true\n      };\n      setCards(newCards);\n      setFlippedCardIndexes(prevIndexes => [...prevIndexes, index]);\n    }\n  };\n  const resetGame = () => {\n    setGameStarted(false);\n    setCards([]);\n    setFlippedCardIndexes([]);\n    setTotalFlips(0);\n    setTotalTime(0);\n    clearInterval(loop);\n  };\n  const shuffle = array => {\n    const clonedArray = [...array];\n    for (let i = clonedArray.length - 1; i > 0; i--) {\n      const randomIndex = Math.floor(Math.random() * (i + 1));\n      const original = clonedArray[i];\n      clonedArray[i] = clonedArray[randomIndex];\n      clonedArray[randomIndex] = original;\n    }\n    return clonedArray;\n  };\n  const pickRandom = (array, items) => {\n    const clonedArray = [...array];\n    const randomPicks = [];\n    for (let i = 0; i < items; i++) {\n      const randomIndex = Math.floor(Math.random() * clonedArray.length);\n      randomPicks.push(clonedArray[randomIndex]);\n      clonedArray.splice(randomIndex, 1);\n    }\n    return randomPicks;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MG-con\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"start-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"start-button\",\n          onClick: resetGame,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"GAME\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"CONTROLS\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stats\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"moves\",\n              children: [totalFlips, \" moves\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"timer\",\n              children: [\"Time: \", totalTime, \" sec\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board_container\",\n          children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `card ${card.flipped ? 'flipped' : ''} ${card.matched ? 'matched' : ''}`,\n            onClick: () => flipCard(index),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-front\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-back\",\n              children: card.flipped || card.matched ? card.emoji : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 33\n            }, this)]\n          }, card.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"win\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n};\n_s(MemoryGame, \"fvu9qBKhNIz/kGekKQMt7OCIFDM=\");\n_c = MemoryGame;\nexport default MemoryGame;\nvar _c;\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MemoryGame","_s","gameStarted","setGameStarted","cards","setCards","flippedCardIndexes","setFlippedCardIndexes","totalFlips","setTotalFlips","totalTime","setTotalTime","loop","setLoop","dimensions","Error","emojis","picks","pickRandom","items","shuffle","initialCards","map","item","index","id","emoji","flipped","matched","interval","setInterval","prevTime","clearInterval","length","firstIndex","secondIndex","newCards","setTimeout","prevFlips","flipCard","prevIndexes","resetGame","array","clonedArray","i","randomIndex","Math","floor","random","original","randomPicks","push","splice","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","card","_c","$RefreshReg$"],"sources":["C:/Users/santa/Desktop/Major/BenchmarkYou/benchmark-you/src/Pages/Games/MemoryGame/MemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './MemoryGame.css';\r\n\r\nconst MemoryGame = () => {\r\n    const [gameStarted, setGameStarted] = useState(false);\r\n    const [cards, setCards] = useState([]);\r\n    const [flippedCardIndexes, setFlippedCardIndexes] = useState([]);\r\n    const [totalFlips, setTotalFlips] = useState(0);\r\n    const [totalTime, setTotalTime] = useState(0);\r\n    const [loop, setLoop] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const dimensions = 4; // Adjust as needed\r\n\r\n        if (dimensions % 2 !== 0) {\r\n            throw new Error(\"The dimension of the board must be an even number.\");\r\n        }\r\n\r\n        const emojis = ['🍐', '🍊', '🍋', '🍉', '🍇', '🍓', '🥑', '🥕', '🌽', '🥬'];\r\n        const picks = pickRandom(emojis, (dimensions * dimensions) / 2);\r\n        const items = shuffle([...picks, ...picks]);\r\n        const initialCards = items.map((item, index) => ({\r\n            id: index,\r\n            emoji: item,\r\n            flipped: false,\r\n            matched: false,\r\n        }));\r\n        setCards(initialCards);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (gameStarted) {\r\n            const interval = setInterval(() => {\r\n                setTotalTime(prevTime => prevTime + 1);\r\n            }, 1000);\r\n            setLoop(interval);\r\n        } else {\r\n            clearInterval(loop);\r\n        }\r\n\r\n        return () => clearInterval(loop);\r\n    }, [gameStarted]);\r\n\r\n    useEffect(() => {\r\n    if (flippedCardIndexes.length === 2) {\r\n        const [firstIndex, secondIndex] = flippedCardIndexes;\r\n        const newCards = [...cards];\r\n\r\n        if (cards[firstIndex].emoji === cards[secondIndex].emoji) {\r\n            newCards[firstIndex] = { ...cards[firstIndex], matched: true };\r\n            newCards[secondIndex] = { ...cards[secondIndex], matched: true };\r\n        } else {\r\n            // If the emojis don't match, flip back the cards after a delay\r\n            setTimeout(() => {\r\n                newCards[firstIndex] = { ...cards[firstIndex], flipped: false };\r\n                newCards[secondIndex] = { ...cards[secondIndex], flipped: false };\r\n                setCards(newCards);\r\n            }, 1000);\r\n        }\r\n\r\n        setCards(newCards);\r\n        setFlippedCardIndexes([]);\r\n        setTotalFlips(prevFlips => prevFlips + 1);\r\n    }\r\n}, [flippedCardIndexes]);\r\n\r\n    const flipCard = index => {\r\n        if (!gameStarted) {\r\n            setGameStarted(true);\r\n        }\r\n\r\n        if (flippedCardIndexes.length < 2 && !cards[index].flipped && !cards[index].matched) {\r\n            const newCards = [...cards];\r\n            newCards[index] = { ...newCards[index], flipped: true };\r\n            setCards(newCards);\r\n\r\n            setFlippedCardIndexes(prevIndexes => [...prevIndexes, index]);\r\n        }\r\n    };\r\n\r\n    const resetGame = () => {\r\n        setGameStarted(false);\r\n        setCards([]);\r\n        setFlippedCardIndexes([]);\r\n        setTotalFlips(0);\r\n        setTotalTime(0);\r\n        clearInterval(loop);\r\n    };\r\n\r\n    const shuffle = array => {\r\n        const clonedArray = [...array];\r\n\r\n        for (let i = clonedArray.length - 1; i > 0; i--) {\r\n            const randomIndex = Math.floor(Math.random() * (i + 1));\r\n            const original = clonedArray[i];\r\n\r\n            clonedArray[i] = clonedArray[randomIndex];\r\n            clonedArray[randomIndex] = original;\r\n        }\r\n        return clonedArray;\r\n    };\r\n\r\n    const pickRandom = (array, items) => {\r\n        const clonedArray = [...array];\r\n        const randomPicks = [];\r\n\r\n        for (let i = 0; i < items; i++) {\r\n            const randomIndex = Math.floor(Math.random() * clonedArray.length);\r\n\r\n            randomPicks.push(clonedArray[randomIndex]);\r\n            clonedArray.splice(randomIndex, 1);\r\n        }\r\n        return randomPicks;\r\n    };\r\n\r\n    return (\r\n        <div className='MG-con'>\r\n            <div className=\"container\">\r\n                <div className=\"start-container\">\r\n                    <button className=\"start-button\" onClick={resetGame}>Start</button>\r\n                </div>\r\n                <div className=\"GAME\">\r\n                    <div className=\"CONTROLS\">\r\n                        <div className=\"stats\">\r\n                            <div className=\"moves\">{totalFlips} moves</div>\r\n                            <div className=\"timer\">Time: {totalTime} sec</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"board_container\">\r\n                        {cards.map((card, index) => (\r\n                            <div\r\n                                key={card.id}\r\n                                className={`card ${card.flipped ? 'flipped' : ''} ${card.matched ? 'matched' : ''}`}\r\n                                onClick={() => flipCard(index)}\r\n                            >\r\n                                <div className=\"card-front\"></div>\r\n                                <div className=\"card-back\">{card.flipped || card.matched ? card.emoji : ''}</div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"win\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MemoryGame;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}