{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\santa\\\\Desktop\\\\Major\\\\BenchmarkYou\\\\benchmark-you\\\\src\\\\Pages\\\\Games\\\\Hangman\\\\Hangman.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './style.css'; // Import your CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst wordList = [/* Your word list array here */];\nconst WordGuessingGame = () => {\n  _s();\n  const [word, setWord] = useState('');\n  const [hint, setHint] = useState('');\n  const [maxGuesses, setMaxGuesses] = useState(0);\n  const [incorrectLetters, setIncorrectLetters] = useState([]);\n  const [correctLetters, setCorrectLetters] = useState([]);\n  const [currentInput, setCurrentInput] = useState('');\n  const randomWord = () => {\n    const randomIndex = Math.floor(Math.random() * wordList.length);\n    const randomItem = wordList[randomIndex];\n    setWord(randomItem.word);\n    setHint(randomItem.hint);\n    setMaxGuesses(randomItem.word.length >= 5 ? 8 : 6);\n    setIncorrectLetters([]);\n    setCorrectLetters([]);\n  };\n  useEffect(() => {\n    randomWord();\n  }, []);\n  const handleInputChange = e => {\n    const key = e.target.value.toLowerCase();\n    setCurrentInput(key);\n  };\n  const initGame = () => {\n    if (currentInput.match(/^[A-Za-z]+$/) && !incorrectLetters.includes(` ${currentInput}`) && !correctLetters.includes(currentInput)) {\n      if (word.includes(currentInput)) {\n        const updatedCorrectLetters = [...correctLetters, currentInput];\n        setCorrectLetters(updatedCorrectLetters);\n      } else {\n        setMaxGuesses(maxGuesses - 1);\n        setIncorrectLetters([...incorrectLetters, ` ${currentInput}`]);\n      }\n    }\n    setCurrentInput('');\n  };\n  useEffect(() => {\n    if (correctLetters.length === word.length) {\n      alert(`Congrats! You found the word ${word.toUpperCase()}`);\n      randomWord();\n    } else if (maxGuesses < 1) {\n      alert(\"Game over! You don't have remaining guesses\");\n      // You might want to handle other things here like revealing the word\n      randomWord();\n    }\n  }, [correctLetters, maxGuesses]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Guess the Word\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"typing-input\",\n        maxLength: \"1\",\n        value: currentInput,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputs\",\n        children: word.split('').map((letter, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          disabled: true,\n          value: correctLetters.includes(letter) ? letter : ''\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"details\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"hint\",\n          children: [\"Hint: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: hint\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 47\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"guess-left\",\n          children: [\"Remaining guesses: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: maxGuesses\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 66\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"wrong-letter\",\n          children: [\"Wrong letters: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: incorrectLetters\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 64\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-btn\",\n        onClick: randomWord,\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(WordGuessingGame, \"kHpUkBohvMRxUdUdupa04W5mYMs=\");\n_c = WordGuessingGame;\nexport default WordGuessingGame;\nvar _c;\n$RefreshReg$(_c, \"WordGuessingGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","wordList","WordGuessingGame","_s","word","setWord","hint","setHint","maxGuesses","setMaxGuesses","incorrectLetters","setIncorrectLetters","correctLetters","setCorrectLetters","currentInput","setCurrentInput","randomWord","randomIndex","Math","floor","random","length","randomItem","handleInputChange","e","key","target","value","toLowerCase","initGame","match","includes","updatedCorrectLetters","alert","toUpperCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","maxLength","onChange","split","map","letter","index","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/santa/Desktop/Major/BenchmarkYou/benchmark-you/src/Pages/Games/Hangman/Hangman.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './style.css'; // Import your CSS file\r\n\r\nconst wordList = [/* Your word list array here */];\r\n\r\nconst WordGuessingGame = () => {\r\n    const [word, setWord] = useState('');\r\n    const [hint, setHint] = useState('');\r\n    const [maxGuesses, setMaxGuesses] = useState(0);\r\n    const [incorrectLetters, setIncorrectLetters] = useState([]);\r\n    const [correctLetters, setCorrectLetters] = useState([]);\r\n    const [currentInput, setCurrentInput] = useState('');\r\n\r\n    const randomWord = () => {\r\n        const randomIndex = Math.floor(Math.random() * wordList.length);\r\n        const randomItem = wordList[randomIndex];\r\n        setWord(randomItem.word);\r\n        setHint(randomItem.hint);\r\n        setMaxGuesses(randomItem.word.length >= 5 ? 8 : 6);\r\n        setIncorrectLetters([]);\r\n        setCorrectLetters([]);\r\n    };\r\n\r\n    useEffect(() => {\r\n        randomWord();\r\n    }, []);\r\n\r\n    const handleInputChange = (e) => {\r\n        const key = e.target.value.toLowerCase();\r\n        setCurrentInput(key);\r\n    };\r\n\r\n    const initGame = () => {\r\n        if (currentInput.match(/^[A-Za-z]+$/) && !incorrectLetters.includes(` ${currentInput}`) && !correctLetters.includes(currentInput)) {\r\n            if (word.includes(currentInput)) {\r\n                const updatedCorrectLetters = [...correctLetters, currentInput];\r\n                setCorrectLetters(updatedCorrectLetters);\r\n            } else {\r\n                setMaxGuesses(maxGuesses - 1);\r\n                setIncorrectLetters([...incorrectLetters, ` ${currentInput}`]);\r\n            }\r\n        }\r\n        setCurrentInput('');\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (correctLetters.length === word.length) {\r\n            alert(`Congrats! You found the word ${word.toUpperCase()}`);\r\n            randomWord();\r\n        } else if (maxGuesses < 1) {\r\n            alert(\"Game over! You don't have remaining guesses\");\r\n            // You might want to handle other things here like revealing the word\r\n            randomWord();\r\n        }\r\n    }, [correctLetters, maxGuesses]);\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <h1>Guess the Word</h1>\r\n            <div className=\"content\">\r\n                <input type=\"text\" className=\"typing-input\" maxLength=\"1\" value={currentInput} onChange={handleInputChange} />\r\n                <div className=\"inputs\">\r\n                    {word.split('').map((letter, index) => (\r\n                        <input key={index} type=\"text\" disabled value={correctLetters.includes(letter) ? letter : ''} />\r\n                    ))}\r\n                </div>\r\n                <div className=\"details\">\r\n                    <p className=\"hint\">Hint: <span>{hint}</span></p>\r\n                    <p className=\"guess-left\">Remaining guesses: <span>{maxGuesses}</span></p>\r\n                    <p className=\"wrong-letter\">Wrong letters: <span>{incorrectLetters}</span></p>\r\n                </div>\r\n                <button className=\"reset-btn\" onClick={randomWord}>Reset Game</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WordGuessingGame;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}